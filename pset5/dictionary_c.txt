/**
 * Implements a dictionary's functionality.
 */

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <ctype.h>
#include "dictionary.h"

char word[LENGTH + 1];
int word_count=0;
int hash(const char *word);
typedef struct node 
{
    char *word;
    struct node *next;
} node;
node *hashtable[HT_SIZE];

/**
 * Returns true if word is in dictionary else false.
 */
bool check(const char *word)
{
    int len = strlen(word);
    char word_copy[len + 1];
    for (int i = 0; i < len; i++)
    {
       word_copy[i] = tolower(word[i]);
    }
    word_copy[len] = '\0';
    int h = hash(word_copy);
    node* cursor = hashtable[h];
    while (cursor != NULL)
    {
        if (strcmp(cursor->word, word_copy) == 0)
        {
            return true;
        }
        else
        {
            cursor = cursor->next;
        }
    }
    return false;
}

/**
 * Loads dictionary into memory. Returns true if successful else false.
 */
bool load(const char *dictionary)
{
    FILE *f = NULL;
    int hv;
 
    for (int i = 0; i < HT_SIZE; i++) 
    {
        hashtable[i] = NULL;
    }

    if (!(f = fopen(dictionary, "r")))
    {
        return false;
    }
    while (fscanf(f,"%s\n",word) != EOF)
    {
        node *new_node = malloc(sizeof(node));
       int len = strlen(word);
        char word_copy[len + 1];
    for (int i = 0; i < len; i++)
    {
       word_copy[i] = tolower(word[i]);
    }
        word_copy[len] = '\0';
        new_node->word = malloc(strlen(word) +1);
        strcpy(new_node->word,word_copy);
    
        hv = hash(word_copy);
  
        word_count++;
    
    if(hashtable[hv] == NULL)
    {
    	hashtable[hv] = new_node;
	    new_node->next = NULL;
    }
    else 
    {
	    new_node->next = hashtable[hv];
	    hashtable[hv] = new_node;
    }
  }
return true;
}

/**
 * Returns number of words in dictionary if loaded else 0 if not yet loaded.
 */
unsigned int size(void)
{
    return word_count;
}

/**
 * Unloads dictionary from memory. Returns true if successful else false.
 */
bool unload(void)
{
    node *cursor;
    
    for (int i = 0; i<HT_SIZE; i++)
    {
        cursor = hashtable[i];
        while (cursor!=NULL)
        {
	        node *temp=cursor;
	        cursor=cursor->next;
	        free(temp);
        }   
        hashtable[i] = NULL;
    }
  
  return true;
}
int hash(const char *word) 
{
    int hash = 0;
        int x = word[0];
        if (x > 64 && x < 91)
        {
            hash = word[0]-65;
        }
        else
        {
            hash = word[0]-97;
        }
    
    return hash; 
}
